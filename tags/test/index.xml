<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on </title>
    <link>/tags/test/</link>
    <description>Recent content in test on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Two Sum Algorithms</title>
      <link>/posts/twosum/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/twosum/</guid>
      <description>Introduction: This post begins my series on algorithms. We will explore a set of common problem archetypes, outline design elements, and finally analyze these solutions as coded in Java, along with the runtime complexity in Big O time.
Problem Archetype: In the &amp;ldquo;Two Sum&amp;rdquo; problem, we are looking for two numbers that exist in a given array adding up to a given target number. For this instance, this array is unorderd, and has no dupes.</description>
    </item>
    
  </channel>
</rss>