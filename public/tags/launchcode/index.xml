<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Launchcode on </title>
    <link>/tags/launchcode/</link>
    <description>Recent content in Launchcode on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/launchcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mario Pset3</title>
      <link>/mario3/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/mario3/</guid>
      <description>Mario Pset 3 Overview: In this problem set, we&amp;rsquo;re going to refactor so that a Pyramid class encapsulates the core logic. Next, ensure that the printer interface only accepts Pyramids. Will implement a &amp;ldquo;toString&amp;rdquo; method on the Pyramid object, overriding the methods inherited from the Object class built in to Java. Finally we&amp;rsquo;re going to implement the Factory Design Pattern to hide the instatiation of the Pyramid objects.
Pyramid object In Java, everything is a sublcass of the Object class, and inherits all of its methods.</description>
    </item>
    
    <item>
      <title>Mario: A Launchcode Problem Set</title>
      <link>/mario/</link>
      <pubDate>Wed, 13 Mar 2019 20:25:45 -0500</pubDate>
      
      <guid>/mario/</guid>
      <description>The Mario Journey Divided into 7 problem sets or psets as referenced in the originial repo, Mario is the application that students will code. I will publish my walkthrough here, beginning with pset1.
First Fork The first step, as noted by the README.md is to fork the original repository. A guide to how to do that can be found here.
ok got it. Check out my fork. Going to add ToDos along with each pset to make it easier to just dig in and code.</description>
    </item>
    
  </channel>
</rss>